# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/DetectedObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import jsk_recognition_msgs.msg
import std_msgs.msg

class DetectedObject(genpy.Message):
  _md5sum = "5db790854edad95e35e6a0a9a78bb615"
  _type = "custom_msgs/DetectedObject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# 单个目标定义
std_msgs/Header header

jsk_recognition_msgs/BoundingBox box
float32 velocity
float64 angle       # Angle [0 to 2*PI), allow rotated rects
geometry_msgs/Pose pose # 单目标位置信息
int32 obj_lane_number

string label
float32 score
int32 x
int32 y
int32 width
int32 height
float32 frenet_length
float32 frenet_distance
float32 dis_to_leftBounding
float32 dis_to_rightBounding

uint32 id   # 单目标id
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: jsk_recognition_msgs/BoundingBox
# BoundingBox represents a oriented bounding box.
Header header
geometry_msgs/Pose pose
geometry_msgs/Vector3 dimensions  # size of bounding box (x, y, z)
# You can use this field to hold value such as likelihood
float32 value
uint32 label

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','box','velocity','angle','pose','obj_lane_number','label','score','x','y','width','height','frenet_length','frenet_distance','dis_to_leftBounding','dis_to_rightBounding','id']
  _slot_types = ['std_msgs/Header','jsk_recognition_msgs/BoundingBox','float32','float64','geometry_msgs/Pose','int32','string','float32','int32','int32','int32','int32','float32','float32','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,box,velocity,angle,pose,obj_lane_number,label,score,x,y,width,height,frenet_length,frenet_distance,dis_to_leftBounding,dis_to_rightBounding,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.box is None:
        self.box = jsk_recognition_msgs.msg.BoundingBox()
      if self.velocity is None:
        self.velocity = 0.
      if self.angle is None:
        self.angle = 0.
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.obj_lane_number is None:
        self.obj_lane_number = 0
      if self.label is None:
        self.label = ''
      if self.score is None:
        self.score = 0.
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.frenet_length is None:
        self.frenet_length = 0.
      if self.frenet_distance is None:
        self.frenet_distance = 0.
      if self.dis_to_leftBounding is None:
        self.dis_to_leftBounding = 0.
      if self.dis_to_rightBounding is None:
        self.dis_to_rightBounding = 0.
      if self.id is None:
        self.id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.box = jsk_recognition_msgs.msg.BoundingBox()
      self.velocity = 0.
      self.angle = 0.
      self.pose = geometry_msgs.msg.Pose()
      self.obj_lane_number = 0
      self.label = ''
      self.score = 0.
      self.x = 0
      self.y = 0
      self.width = 0
      self.height = 0
      self.frenet_length = 0.
      self.frenet_distance = 0.
      self.dis_to_leftBounding = 0.
      self.dis_to_rightBounding = 0.
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs))
      _x = self.box.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10dfIf8di().pack(_x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.dimensions.x, _x.box.dimensions.y, _x.box.dimensions.z, _x.box.value, _x.box.label, _x.velocity, _x.angle, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.obj_lane_number))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f4i4fI().pack(_x.score, _x.x, _x.y, _x.width, _x.height, _x.frenet_length, _x.frenet_distance, _x.dis_to_leftBounding, _x.dis_to_rightBounding, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.box is None:
        self.box = jsk_recognition_msgs.msg.BoundingBox()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.box.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.dimensions.x, _x.box.dimensions.y, _x.box.dimensions.z, _x.box.value, _x.box.label, _x.velocity, _x.angle, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.obj_lane_number,) = _get_struct_10dfIf8di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.score, _x.x, _x.y, _x.width, _x.height, _x.frenet_length, _x.frenet_distance, _x.dis_to_leftBounding, _x.dis_to_rightBounding, _x.id,) = _get_struct_f4i4fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs))
      _x = self.box.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10dfIf8di().pack(_x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.dimensions.x, _x.box.dimensions.y, _x.box.dimensions.z, _x.box.value, _x.box.label, _x.velocity, _x.angle, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.obj_lane_number))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f4i4fI().pack(_x.score, _x.x, _x.y, _x.width, _x.height, _x.frenet_length, _x.frenet_distance, _x.dis_to_leftBounding, _x.dis_to_rightBounding, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.box is None:
        self.box = jsk_recognition_msgs.msg.BoundingBox()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.box.header.seq, _x.box.header.stamp.secs, _x.box.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.box.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.box.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.box.pose.position.x, _x.box.pose.position.y, _x.box.pose.position.z, _x.box.pose.orientation.x, _x.box.pose.orientation.y, _x.box.pose.orientation.z, _x.box.pose.orientation.w, _x.box.dimensions.x, _x.box.dimensions.y, _x.box.dimensions.z, _x.box.value, _x.box.label, _x.velocity, _x.angle, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.obj_lane_number,) = _get_struct_10dfIf8di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.score, _x.x, _x.y, _x.width, _x.height, _x.frenet_length, _x.frenet_distance, _x.dis_to_leftBounding, _x.dis_to_rightBounding, _x.id,) = _get_struct_f4i4fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10dfIf8di = None
def _get_struct_10dfIf8di():
    global _struct_10dfIf8di
    if _struct_10dfIf8di is None:
        _struct_10dfIf8di = struct.Struct("<10dfIf8di")
    return _struct_10dfIf8di
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_f4i4fI = None
def _get_struct_f4i4fI():
    global _struct_f4i4fI
    if _struct_f4i4fI is None:
        _struct_f4i4fI = struct.Struct("<f4i4fI")
    return _struct_f4i4fI
