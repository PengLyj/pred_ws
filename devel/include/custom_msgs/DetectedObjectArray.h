// Generated by gencpp from file custom_msgs/DetectedObjectArray.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_DETECTEDOBJECTARRAY_H
#define CUSTOM_MSGS_MESSAGE_DETECTEDOBJECTARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <custom_msgs/DetectedObject.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct DetectedObjectArray_
{
  typedef DetectedObjectArray_<ContainerAllocator> Type;

  DetectedObjectArray_()
    : header()
    , objects()
    , vel_lane_number(0)
    , speed_limit(0.0)
    , num(0)  {
    }
  DetectedObjectArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects(_alloc)
    , vel_lane_number(0)
    , speed_limit(0.0)
    , num(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::custom_msgs::DetectedObject_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::custom_msgs::DetectedObject_<ContainerAllocator> >> _objects_type;
  _objects_type objects;

   typedef int32_t _vel_lane_number_type;
  _vel_lane_number_type vel_lane_number;

   typedef float _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef uint32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObjectArray_

typedef ::custom_msgs::DetectedObjectArray_<std::allocator<void> > DetectedObjectArray;

typedef boost::shared_ptr< ::custom_msgs::DetectedObjectArray > DetectedObjectArrayPtr;
typedef boost::shared_ptr< ::custom_msgs::DetectedObjectArray const> DetectedObjectArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::DetectedObjectArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::DetectedObjectArray_<ContainerAllocator1> & lhs, const ::custom_msgs::DetectedObjectArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.objects == rhs.objects &&
    lhs.vel_lane_number == rhs.vel_lane_number &&
    lhs.speed_limit == rhs.speed_limit &&
    lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::DetectedObjectArray_<ContainerAllocator1> & lhs, const ::custom_msgs::DetectedObjectArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0b9809ba26357a84292b034d6b7ce98";
  }

  static const char* value(const ::custom_msgs::DetectedObjectArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0b9809ba26357a8ULL;
  static const uint64_t static_value2 = 0x4292b034d6b7ce98ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/DetectedObjectArray";
  }

  static const char* value(const ::custom_msgs::DetectedObjectArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 单帧所有目标的当前状态\n"
"std_msgs/Header header\n"
"DetectedObject[] objects    # 单帧多个目标的坐标集合\n"
"int32 vel_lane_number\n"
"float32 speed_limit\n"
"uint32 num  # 单帧目标数量\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: custom_msgs/DetectedObject\n"
"# 单个目标定义\n"
"std_msgs/Header header\n"
"\n"
"jsk_recognition_msgs/BoundingBox box\n"
"float32 velocity\n"
"float64 angle       # Angle [0 to 2*PI), allow rotated rects\n"
"geometry_msgs/Pose pose # 单目标位置信息\n"
"int32 obj_lane_number\n"
"\n"
"string label\n"
"float32 score\n"
"int32 x\n"
"int32 y\n"
"int32 width\n"
"int32 height\n"
"float32 frenet_length\n"
"float32 frenet_distance\n"
"float32 dis_to_leftBounding\n"
"float32 dis_to_rightBounding\n"
"\n"
"uint32 id   # 单目标id\n"
"================================================================================\n"
"MSG: jsk_recognition_msgs/BoundingBox\n"
"# BoundingBox represents a oriented bounding box.\n"
"Header header\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Vector3 dimensions  # size of bounding box (x, y, z)\n"
"# You can use this field to hold value such as likelihood\n"
"float32 value\n"
"uint32 label\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::custom_msgs::DetectedObjectArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
      stream.next(m.vel_lane_number);
      stream.next(m.speed_limit);
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObjectArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::DetectedObjectArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::DetectedObjectArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::custom_msgs::DetectedObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "vel_lane_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel_lane_number);
    s << indent << "speed_limit: ";
    Printer<float>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_DETECTEDOBJECTARRAY_H
